// Generated by gencpp from file person_detection/Skeleton.msg
// DO NOT EDIT!


#ifndef PERSON_DETECTION_MESSAGE_SKELETON_H
#define PERSON_DETECTION_MESSAGE_SKELETON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <person_detection/Keypoint.h>

namespace person_detection
{
template <class ContainerAllocator>
struct Skeleton_
{
  typedef Skeleton_<ContainerAllocator> Type;

  Skeleton_()
    : keypoints()  {
    }
  Skeleton_(const ContainerAllocator& _alloc)
    : keypoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::person_detection::Keypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::person_detection::Keypoint_<ContainerAllocator> >::other >  _keypoints_type;
  _keypoints_type keypoints;





  typedef boost::shared_ptr< ::person_detection::Skeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::person_detection::Skeleton_<ContainerAllocator> const> ConstPtr;

}; // struct Skeleton_

typedef ::person_detection::Skeleton_<std::allocator<void> > Skeleton;

typedef boost::shared_ptr< ::person_detection::Skeleton > SkeletonPtr;
typedef boost::shared_ptr< ::person_detection::Skeleton const> SkeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::person_detection::Skeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::person_detection::Skeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace person_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'person_detection': ['/home/informatik/git/studienarbeit/i-believe-i-can-fly-v2/catkin/src/person_detection/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::person_detection::Skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::person_detection::Skeleton_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::person_detection::Skeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::person_detection::Skeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::person_detection::Skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::person_detection::Skeleton_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::person_detection::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be627c8ae26f21bd9a2b064739c579b3";
  }

  static const char* value(const ::person_detection::Skeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe627c8ae26f21bdULL;
  static const uint64_t static_value2 = 0x9a2b064739c579b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::person_detection::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "person_detection/Skeleton";
  }

  static const char* value(const ::person_detection::Skeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::person_detection::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Keypoint[] keypoints\n\
================================================================================\n\
MSG: person_detection/Keypoint\n\
string name\n\
int16 x\n\
int16 y\n\
float32 accuracy\n\
";
  }

  static const char* value(const ::person_detection::Skeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::person_detection::Skeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.keypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Skeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::person_detection::Skeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::person_detection::Skeleton_<ContainerAllocator>& v)
  {
    s << indent << "keypoints[]" << std::endl;
    for (size_t i = 0; i < v.keypoints.size(); ++i)
    {
      s << indent << "  keypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::person_detection::Keypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.keypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERSON_DETECTION_MESSAGE_SKELETON_H
